/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package janelas;

import entidades.Candidato;
import entidades.Cargo;
import entidades.Concurso;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import mainpackage.Main;
import persistencia.Arquivo;
import persistencia.BancoDeDados;

/**
 *
 * @author luizk
 */
public class JanelaPrincipal extends javax.swing.JFrame {

	static ArrayList<Candidato> listaDeCandidatos = new ArrayList<>();
	static ArrayList<Concurso> listaDeConcursos = new ArrayList<>();
	static ArrayList<Cargo> listaDeCargos = new ArrayList<>();

	/**
	 * Creates new form JanelaPrincipal
	 */
	public JanelaPrincipal() {
		initComponents();
		carregarCandidatos("textfiles/candidatos.txt");
		carregarConcursos("textfiles/concursos.txt");
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCpf = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jCampoCpf = new javax.swing.JTextField();
        jButtonCpf = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jCampoCodigo = new javax.swing.JTextField();
        jButtonCodigo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCodigo = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableCpf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Orgao", "Edital", "Cod Concurso", "Vagas"
            }
        ));
        jScrollPane1.setViewportView(jTableCpf);

        jLabel1.setText("CPF Do Candidato:");

        jButtonCpf.setText("Pesquisar");
        jButtonCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCpfActionPerformed(evt);
            }
        });

        jLabel2.setText("Codigo do Concurso:");

        jButtonCodigo.setText("Pesquisar");
        jButtonCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCodigoActionPerformed(evt);
            }
        });

        jTableCodigo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Data Nasc", "CPF", "Profissoes"
            }
        ));
        jScrollPane2.setViewportView(jTableCodigo);

        jMenuArquivo.setText("Menu");

        jMenuItem1.setText("Salvar no banco");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItem1);

        jMenuItem2.setText("Carregar do Banco");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItem2);

        jMenuBar1.add(jMenuArquivo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jCampoCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCpf))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCampoCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCodigo))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCampoCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCpf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCampoCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCodigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCpfActionPerformed
        String campoCpf = this.jCampoCpf.getText();
		if(campoCpf.equals("")){
			atualizarTabela1(listaDeConcursos);
		} else {
			Candidato cand = getCandidatoFromCpf(campoCpf);
			ArrayList<Concurso> lista = getConcursosByCandidato(cand);
			atualizarTabela1(lista);
		}
    }//GEN-LAST:event_jButtonCpfActionPerformed

    private void jButtonCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCodigoActionPerformed
        String campoCod = this.jCampoCodigo.getText();
		if(campoCod.equals("")){
			atualizarTabela2(listaDeCandidatos);
		} else {
			Concurso conc = getConcursoFromCodigo(campoCod);
			ArrayList<Candidato> lista = getCandidatosByConcurso(conc);
			atualizarTabela2(lista);
		}
    }//GEN-LAST:event_jButtonCodigoActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
		try {
			BancoDeDados sql = new BancoDeDados();
			System.out.println("arquivos carregados.");
			
			//sql.criarTabelaCandidato();
			//sql.criarTabelaCargo();
			//sql.criarTabelaConcurso();
			System.out.println("tabelas criadas.");
			
			for(Candidato cand : listaDeCandidatos){ sql.saveCandidato(cand); }
			for(Cargo cargo : listaDeCargos){ sql.saveCargo(cargo); }
			for(Concurso conc : listaDeConcursos){ sql.saveConcurso(conc); }
			System.out.println("dados salvos nas tabelas.");
			
			JOptionPane.showMessageDialog(null, "Dados do arquivo salvos no banco!");
		} catch (SQLException ex) {
			Logger.getLogger(JanelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
			JOptionPane.showMessageDialog(null, "Erro ao salvar do arquivo para o banco.");
		}
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new JanelaPrincipal().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCodigo;
    private javax.swing.JButton jButtonCpf;
    private javax.swing.JTextField jCampoCodigo;
    private javax.swing.JTextField jCampoCpf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCodigo;
    private javax.swing.JTable jTableCpf;
    // End of variables declaration//GEN-END:variables

	/**
	 * Percorre uma {@code String} procurando os espaços em branco antes
	 * do primeiro caractere e depois do ultimo caractere, e os remove.
	 * 
	 * @param stringBuffer
	 * @return 
	 */
	public String removeEspacoExtra(String stringBuffer) {
		int ultimaPosicao = stringBuffer.length()-1;
		while(ultimaPosicao > 0 && stringBuffer.charAt(ultimaPosicao) == ' '){
			stringBuffer = stringBuffer.substring(0, stringBuffer.length()-1);
			ultimaPosicao = stringBuffer.length()-1;
		}
		while(stringBuffer.charAt(0) == ' ' && stringBuffer.length() > 0){
			stringBuffer = stringBuffer.substring(0, stringBuffer.length()-1);
		}
		return stringBuffer;
	}
	
	/**
	 * Verifica se um caracter representa um dos digitos entre 0 e 9
	 * 
	 * @param c O char a ser verificado
	 * @return O valor {@code boolean} indicando se eh algarismo
	 */
	public boolean isAlgarismo(char c){
		String algs = "0123456789";
		for(int i = 0; i < algs.length(); i++){
			if(c == algs.charAt(i)){
				return true;
			}
		}
		return false;
	}
	
	/**
	 * Como numeros são mais eficientes de se pesquisar em SQL,
	 * essa função converte cada tipo de cargo em um numero id
	 * próprio antes de salvar a informação.
	 * 
	 * @param str
	 * @return 
	 */
	public int[] cargosComoNumeros(String str) {
		String[] nomes = str.split(",");
		int[] numeros = new int[nomes.length];
		int i;
		
		//TODO verificar mais de um espaço antes e depois das palavras
		for(i=0; i < nomes.length; i++){
			if(nomes[i].charAt(0) == ' '){
				nomes[i] = nomes[i].substring(1, nomes[i].length());
			}
			if(nomes[i].charAt(nomes[i].length()-1) == ' '){
				nomes[i] = nomes[i].substring(0, nomes[i].length()-1);
			}
		}
		for(i=0; i < numeros.length; i++){
			numeros[i] = -1;
		}
		for (Cargo cargo : listaDeCargos) {
			for (i=0; i < nomes.length; i++) {
				if(nomes[i].equals(cargo.nome)){
					numeros[i] = cargo.id;
				}
			}
		}
		for (i=0; i < numeros.length; i++){
			if(numeros[i] == -1){
				int cargoId = listaDeCargos.size()+1;
				listaDeCargos.add(new Cargo(
						cargoId,
						nomes[i]
				));
				numeros[i] = cargoId;
			}
		}
		
		return numeros;
	}
	
	/**
	 * Retorna uma string com nomes de profissoes separados por virgulas
	 * a partir de uma lista de inteiros, comparando esses inteiros com
	 * as ids dos cargos salvos.
	 * 
	 * @param numeros
	 * @return 
	 */
	public String cargoNamesFromNumberList(int[] numeros){
		String[] nomes = new String[numeros.length];
		String nomesJuntos = "";
		for(int i=0; i < numeros.length; i++){
			nomes[i] = "";
			for(int j=0; j < listaDeCargos.size(); j++){
				if(numeros[i] == listaDeCargos.get(j).id){
					nomes[i] = listaDeCargos.get(j).nome;
					break;
				}
			}
		}
		for(String nome : nomes){
			nomesJuntos += nome + ",";
		}
		return nomesJuntos;
	}

	/**
	 * Carrega dados de um txt na memória com o formato adequado
	 * para a classe Candidato
	 * 
	 * @param nomeDoArquivo String com o nome (e caminho) do arquivo a ser carregado
	 */
	public void carregarCandidatos(String nomeDoArquivo) {
		Arquivo arquivo = new Arquivo();
		String linha = "";
		
		try {
			arquivo.abrir(nomeDoArquivo);
			
			for (int i = 0; arquivo.lerLinha() != null; i++) {
				String strBuffer = "";
				linha = arquivo.getLinhaAtual();
				listaDeCandidatos.add(new Candidato());
				int j;
				
				/*
				Salvando os caracteres correspontentes ao nome e parando
				quando encontra um numero
				*/
				for(j = 0; j < linha.length() && !isAlgarismo(linha.charAt(j)); j++) {
					strBuffer += linha.charAt(j);
				}
				strBuffer = removeEspacoExtra(strBuffer);
				listaDeCandidatos.get(i).setNome(strBuffer);
				
				/*
				Salvando os caracteres correspondentes a Data
				*/
				strBuffer = "";
				for(; j < linha.length() && linha.charAt(j) != ' '; j++) {
					strBuffer += linha.charAt(j);
				}
				strBuffer = removeEspacoExtra(strBuffer);
				listaDeCandidatos.get(i).setDataNasc(strBuffer);
				
				/*
				Salvando os caracteres correspondentes ao CPF
				*/
				strBuffer = "";
				for(j+=1; j < linha.length() && linha.charAt(j) != ' '; j++) {
					strBuffer += linha.charAt(j);
				}
				strBuffer = removeEspacoExtra(strBuffer);
				listaDeCandidatos.get(i).setCpf(strBuffer);
				
				/*
				Salvando os dados correspondentes as vagas desejadas
				*/
				strBuffer = "";
				for(j+=1; j < linha.length(); j++) {
					strBuffer += linha.charAt(j);
				}
				strBuffer = strBuffer.substring(1, strBuffer.length()-1);
				strBuffer = removeEspacoExtra(strBuffer);
				listaDeCandidatos.get(i).setCargo(cargosComoNumeros(strBuffer));
			}

			arquivo.fechar();
			
		} catch (FileNotFoundException ex) {
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * Carrega dados de um txt na memória com o formato adequado
	 * para a classe Concurso
	 * 
	 * @param nomeDoArquivo String com o nome (e caminho) do arquivo a ser carregado
	 */
	public void carregarConcursos(String nomeDoArquivo) {
		Arquivo arquivo = new Arquivo();
		String linha = "";
		
		try {
			arquivo.abrir(nomeDoArquivo);
			
			for (int i = 0; arquivo.lerLinha() != null; i++) {
				String stringBuffer = "";
				linha = arquivo.getLinhaAtual();
				listaDeConcursos.add(new Concurso());
				int j;
				
				/*
				Salvando os caracteres correspontentes ao nome e parando
				quando encontra um numero
				*/
				for(j = 0; j < linha.length() && !isAlgarismo(linha.charAt(j)); j++) {
					stringBuffer += linha.charAt(j);
				}
				stringBuffer = removeEspacoExtra(stringBuffer);
				listaDeConcursos.get(i).setOrgao(stringBuffer);
				
				/*
				Salvando os caracteres correspondentes a Data
				*/
				stringBuffer = "";
				for(; j < linha.length() && linha.charAt(j) != ' '; j++) {
					stringBuffer += linha.charAt(j);
				}
				stringBuffer = removeEspacoExtra(stringBuffer);
				listaDeConcursos.get(i).setEdital(stringBuffer);
				
				/*
				Salvando os caracteres correspondentes ao CPF
				*/
				stringBuffer = "";
				for(j+=1; j < linha.length() && linha.charAt(j) != ' '; j++) {
					stringBuffer += linha.charAt(j);
				}
				stringBuffer = removeEspacoExtra(stringBuffer);
				listaDeConcursos.get(i).setCodigo(stringBuffer);
				
				/*
				Salvando os dados correspondentes as vagas desejadas
				*/
				stringBuffer = "";
				for(j+=1; j < linha.length(); j++) {
					stringBuffer += linha.charAt(j);
				}
				stringBuffer = stringBuffer.substring(1, stringBuffer.length()-1);
				stringBuffer = removeEspacoExtra(stringBuffer);
				listaDeConcursos.get(i).setCargo(cargosComoNumeros(stringBuffer));
			}

			arquivo.fechar();
			
		} catch (FileNotFoundException ex) {
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
		} catch (IOException ex) {
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void atualizarTabela1(ArrayList<Concurso> lista) {
		DefaultTableModel model = (DefaultTableModel) this.jTableCpf.getModel();
		model.getDataVector().removeAllElements();
		model.fireTableDataChanged();
		if(lista != null){
			for(Concurso concurso : lista){
				model.addRow(new Object[]{
					concurso.getOrgao(),
					concurso.getEdital(),
					concurso.getCodigo(),
					cargoNamesFromNumberList(concurso.getCargo())
				});
			}
		} else {
			JOptionPane.showMessageDialog(null, "Nenhum concurso disponivel para esse candidato.");
		}
	}
	
	public void atualizarTabela2(ArrayList<Candidato> lista) {
		DefaultTableModel model = (DefaultTableModel) this.jTableCodigo.getModel();
		model.getDataVector().removeAllElements();
		model.fireTableDataChanged();
		if(lista != null){
			for(Candidato candidato : lista){
				model.addRow(new Object[]{
					candidato.getNome(),
					candidato.getDataNasc(),
					candidato.getCpf(),
					cargoNamesFromNumberList(candidato.getCargo())
				});
			}
		} else {
			JOptionPane.showMessageDialog(null, "Nenhum candidato disponivel para esse concurso.");
		}
	}
	
	/**
	 * Compara um vetor de inteiros com outro vetor de inteiros em busca de
	 * pelo menos um elemento em comum. 
	 * 
	 * <p> Se encontrar um ou mais elementos em
	 * comum, retorna true, caso contrario retorna falso.
	 * 
	 * @param vetA vetor de inteiros
	 * @param vetB vetor de inteiros
	 * @return 
	 */
	public boolean temElementoEmComum(int[] vetA, int[] vetB){
		for(int elem1 : vetA){
			for(int elem2 : vetB){
				if(elem2 == elem1)
					return true;
			}
		}
		return false;
	}

	/**
	 * Retorna o primeiro candidato que tenha o mesmo CPF passado como
	 * parametro.
	 * 
	 * <p> Se nenhum candidato for encontrado, retorna nulo.
	 * 
	 * @param campoCpf
	 * @return 
	 */
	public Candidato getCandidatoFromCpf(String campoCpf) {
		Candidato cand = null;
		for(Candidato c : listaDeCandidatos){
			if(c.getCpf().equals(campoCpf)){
				cand = c;
				break;
			}
		}
		return cand;
	}

	/**
	 * Retorna o primeiro concurso que tenha o mesmo codigo passado como
	 * parametro.
	 * 
	 * <p> Se nenhum concurso for encontrado, retorna nulo.
	 * 
	 * @param campoCod
	 * @return 
	 */
	public Concurso getConcursoFromCodigo(String campoCod) {
		Concurso conc = null;
		for(Concurso c : listaDeConcursos){
			if(c.getCodigo().equals(campoCod)){
				conc = c;
				break;
			}
		}
		return conc;
	}

	/**
	 * Retorna uma lista de todos os concursos que podem ser feitos pelo
	 * candidato passado como parametro.
	 * 
	 * <p> Se o parametro candidato que foi passado for nulo, retorna
	 * um valor nulo.
	 * 
	 * @param cand
	 * @return 
	 */
	public ArrayList<Concurso> getConcursosByCandidato(Candidato cand) {
		ArrayList<Concurso> lista = new ArrayList<>();
		if(cand != null){
			for(Concurso conc : listaDeConcursos){
				if(temElementoEmComum(cand.getCargo(), conc.getCargo())){
					lista.add(conc);
				}
			}	
		} else {
			return null;
		}
		return lista;
	}
	
	/**
	 * Retorna uma lista de todos os candidatos que possuem os requisitos
	 * para fazer o concurso passado como parametro. Se o parametro concurso
	 * passado for nulo, retorna um valor nulo.
	 * 
	 * @param conc
	 * @return 
	 */
	public ArrayList<Candidato> getCandidatosByConcurso(Concurso conc) {
		ArrayList<Candidato> lista = new ArrayList<>();
		if(conc != null){
			for(Candidato cand : listaDeCandidatos){
				if(temElementoEmComum(cand.getCargo(), conc.getCargo())){
					lista.add(cand);
				}
			}
		} else {
			return null;
		}
		return lista;
	}
}
